@@ -31,50 +31,73 @@
 #include "tool_writeout_json.h"
 #include "tool_writeout.h"
 
-void jsonWriteString(FILE *stream, const char *in, bool lowercase)
+#define MAX_JSON_STRING 100000
+
+/* provide the given string in dynbuf as a quoted json string, but without the
+   outer quotes. The buffer is not inited by this function.
+
+   Return 0 on success, non-zero on error.
+*/
+int jsonquoted(const char *in, size_t len,
+               struct curlx_dynbuf *out, bool lowercase)
 {
   const char *i = in;
-  const char *in_end = in + strlen(in);
+  const char *in_end = &in[len];
+  CURLcode result = CURLE_OK;
 
-  fputc('\"', stream);
-  for(; i < in_end; i++) {
+  for(; (i < in_end) && !result; i++) {
     switch(*i) {
     case '\\':
-      fputs("\\\\", stream);
+      result = curlx_dyn_addn(out, "\\\\", 2);
       break;
     case '\"':
-      fputs("\\\"", stream);
+      result = curlx_dyn_addn(out, "\\\"", 2);
       break;
     case '\b':
-      fputs("\\b", stream);
+      result = curlx_dyn_addn(out, "\\b", 2);
       break;
     case '\f':
-      fputs("\\f", stream);
+      result = curlx_dyn_addn(out, "\\f", 2);
       break;
     case '\n':
-      fputs("\\n", stream);
+      result = curlx_dyn_addn(out, "\\n", 2);
       break;
     case '\r':
-      fputs("\\r", stream);
+      result = curlx_dyn_addn(out, "\\r", 2);
       break;
     case '\t':
-      fputs("\\t", stream);
+      result = curlx_dyn_addn(out, "\\t", 2);
       break;
     default:
-      if(*i < 32) {
-        fprintf(stream, "\\u%04x", *i);
-      }
+      if(*i < 32)
+        result = curlx_dyn_addf(out, "\\u%04x", *i);
       else {
-        char out = *i;
-        if(lowercase && (out >= 'A' && out <= 'Z'))
+        char o = *i;
+        if(lowercase && (o >= 'A' && o <= 'Z'))
           /* do not use tolower() since that's locale specific */
-          out |= ('a' - 'A');
-        fputc(out, stream);
+          o |= ('a' - 'A');
+        result = curlx_dyn_addn(out, &o, 1);
       }
       break;
     }
   }
-  fputc('\"', stream);
+  if(result)
+    return (int)result;
+  return 0;
+}
+
+void jsonWriteString(FILE *stream, const char *in, bool lowercase)
+{
+  struct curlx_dynbuf out;
+  curlx_dyn_init(&out, MAX_JSON_STRING);
+
+  if(!jsonquoted(in, strlen(in), &out, lowercase)) {
+    fputc('\"', stream);
+    if(curlx_dyn_len(&out))
+      fputs(curlx_dyn_ptr(&out), stream);
+    fputc('\"', stream);
+  }
+  curlx_dyn_free(&out);
 }
 
 void ourWriteOutJSON(FILE *stream, const struct writeoutvar mappings[],
