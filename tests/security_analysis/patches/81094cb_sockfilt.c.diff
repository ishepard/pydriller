@@ -406,7 +406,12 @@ struct select_ws_wait_data {
   HANDLE signal; /* internal event to signal handle trigger */
   HANDLE abort;  /* internal event to abort waiting threads */
 };
+#ifdef _WIN32_WCE
 static DWORD WINAPI select_ws_wait_thread(LPVOID lpParameter)
+#else
+#include <process.h>
+static unsigned int WINAPI select_ws_wait_thread(void *lpParameter)
+#endif
 {
   struct select_ws_wait_data *data;
   HANDLE signal, handle, handles[2];
@@ -549,8 +554,15 @@ static DWORD WINAPI select_ws_wait_thread(LPVOID lpParameter)
 }
 static HANDLE select_ws_wait(HANDLE handle, HANDLE signal, HANDLE abort)
 {
+#ifdef _WIN32_WCE
+  typedef HANDLE curl_win_thread_handle_t;
+#elif defined(__MINGW32__) && !defined(__MINGW64_VERSION_MAJOR)
+  typedef unsigned long curl_win_thread_handle_t;
+#else
+  typedef uintptr_t curl_win_thread_handle_t;
+#endif
   struct select_ws_wait_data *data;
-  HANDLE thread = NULL;
+  curl_win_thread_handle_t thread;
 
   /* allocate internal waiting data structure */
   data = malloc(sizeof(struct select_ws_wait_data));
@@ -560,17 +572,19 @@ static HANDLE select_ws_wait(HANDLE handle, HANDLE signal, HANDLE abort)
     data->abort = abort;
 
     /* launch waiting thread */
-    thread = CreateThread(NULL, 0,
-                          &select_ws_wait_thread,
-                          data, 0, NULL);
+#ifdef _WIN32_WCE
+    thread = CreateThread(NULL, 0,  &select_ws_wait_thread, data, 0, NULL);
+#else
+    thread = _beginthreadex(NULL, 0, &select_ws_wait_thread, data, 0, NULL);
+#endif
 
     /* free data if thread failed to launch */
     if(!thread) {
       free(data);
     }
+    return (HANDLE)thread;
   }
-
-  return thread;
+  return NULL;
 }
 struct select_ws_data {
   int fd;                /* provided file descriptor  (indexed by nfd) */
