@@ -25,6 +25,7 @@
 ###########################################################################
 #
 import logging
+import os
 import re
 import pytest
 
@@ -56,7 +57,10 @@ class TestShutdown:
     def test_19_01_check_tcp_rst(self, env: Env, httpd, proto):
         if env.ci_run:
             pytest.skip("seems not to work in CI")
-        curl = CurlClient(env=env)
+        run_env = os.environ.copy()
+        if 'CURL_DEBUG' in run_env:
+            del run_env['CURL_DEBUG']
+        curl = CurlClient(env=env, run_env=run_env)
         url = f'https://{env.authority_for(env.domain1, proto)}/data.json?[0-1]'
         r = curl.http_download(urls=[url], alpn_proto=proto, with_tcpdump=True, extra_args=[
             '--parallel'
@@ -71,10 +75,12 @@ class TestShutdown:
     def test_19_02_check_shutdown(self, env: Env, httpd, proto):
         if not env.curl_is_debug():
             pytest.skip('only works for curl debug builds')
-        curl = CurlClient(env=env, run_env={
+        run_env = os.environ.copy()
+        run_env.update({
             'CURL_GRACEFUL_SHUTDOWN': '2000',
-            'CURL_DEBUG': 'ssl,tcp'
+            'CURL_DEBUG': 'ssl,tcp,lib-ids,multi'
         })
+        curl = CurlClient(env=env, run_env=run_env)
         url = f'https://{env.authority_for(env.domain1, proto)}/data.json?[0-1]'
         r = curl.http_download(urls=[url], alpn_proto=proto, with_tcpdump=True, extra_args=[
             '--parallel'
@@ -91,14 +97,14 @@ class TestShutdown:
         count = 10
         curl = CurlClient(env=env, run_env={
             'CURL_GRACEFUL_SHUTDOWN': '2000',
-            'CURL_DEBUG': 'ssl'
+            'CURL_DEBUG': 'ssl,multi'
         })
         url = f'https://{env.authority_for(env.domain1, proto)}/curltest/tweak/?'\
             f'id=[0-{count-1}]&with_cl&close'
         r = curl.http_download(urls=[url], alpn_proto=proto)
         r.check_response(http_status=200, count=count)
         shutdowns = [line for line in r.trace_lines
-                     if re.match(r'.*CCACHE\] shutdown #\d+, done=1', line)]
+                     if re.match(r'.*\[CPOOL\] shutdown, done=1', line)]
         assert len(shutdowns) == count, f'{shutdowns}'
 
     # run downloads with CURLOPT_FORBID_REUSE set, meaning *we* close
@@ -112,7 +118,7 @@ class TestShutdown:
         url = f'https://localhost:{env.https_port}/{docname}'
         client = LocalClient(name='hx-download', env=env, run_env={
             'CURL_GRACEFUL_SHUTDOWN': '2000',
-            'CURL_DEBUG': 'ssl'
+            'CURL_DEBUG': 'ssl,multi'
         })
         if not client.exists():
             pytest.skip(f'example client not built: {client.name}')
@@ -121,7 +127,7 @@ class TestShutdown:
         ])
         r.check_exit_code(0)
         shutdowns = [line for line in r.trace_lines
-                     if re.match(r'.*CCACHE\] shutdown #\d+, done=1', line)]
+                     if re.match(r'.*CPOOL\] shutdown, done=1', line)]
         assert len(shutdowns) == count, f'{shutdowns}'
 
     # run event-based downloads with CURLOPT_FORBID_REUSE set, meaning *we* close
@@ -131,13 +137,13 @@ class TestShutdown:
         if not env.curl_is_debug():
             pytest.skip('only works for curl debug builds')
         count = 10
-        curl = CurlClient(env=env, run_env={
-            # forbid connection reuse to trigger shutdowns after transfer
-            'CURL_FORBID_REUSE': '1',
-            # make socket receives block 50% of the time to delay shutdown
-            'CURL_DBG_SOCK_RBLOCK': '50',
-            'CURL_DEBUG': 'ssl'
-        })
+        run_env = os.environ.copy()
+        # forbid connection reuse to trigger shutdowns after transfer
+        run_env['CURL_FORBID_REUSE'] = '1'
+        # make socket receives block 50% of the time to delay shutdown
+        run_env['CURL_DBG_SOCK_RBLOCK'] = '50'
+        run_env['CURL_DEBUG'] = 'ssl,multi,lib-ids'
+        curl = CurlClient(env=env, run_env=run_env)
         url = f'https://{env.authority_for(env.domain1, proto)}/curltest/tweak/?'\
             f'id=[0-{count-1}]&with_cl&'
         r = curl.http_download(urls=[url], alpn_proto=proto, extra_args=[
@@ -146,7 +152,7 @@ class TestShutdown:
         r.check_response(http_status=200, count=count)
         # check that we closed all connections
         closings = [line for line in r.trace_lines
-                    if re.match(r'.*CCACHE\] closing #\d+', line)]
+                    if re.match(r'.*CPOOL\] closing', line)]
         assert len(closings) == count, f'{closings}'
         # check that all connection sockets were removed from event
         removes = [line for line in r.trace_lines
@@ -171,5 +177,5 @@ class TestShutdown:
         r.check_response(http_status=200, count=2)
         # check connection cache closings
         shutdowns = [line for line in r.trace_lines
-                     if re.match(r'.*CCACHE\] shutdown #\d+, done=1', line)]
+                     if re.match(r'.*CPOOL\] shutdown, done=1', line)]
         assert len(shutdowns) == 1, f'{shutdowns}'
