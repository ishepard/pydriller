@@ -219,6 +219,7 @@ option(CURL_USE_PKGCONFIG "Enable pkg-config to detect dependencies" ${_curl_use
 
 # Initialize CURL_LIBS
 set(CURL_LIBS "")
+set(CURL_LIBDIRS "")
 set(LIBCURL_PC_REQUIRES_PRIVATE "")
 
 if(ENABLE_ARES)
@@ -621,8 +622,13 @@ if(CURL_USE_GNUTLS)
   set(_ssl_enabled ON)
   set(USE_GNUTLS ON)
   list(APPEND CURL_LIBS ${GNUTLS_LIBRARIES} ${NETTLE_LIBRARIES})
+  list(APPEND CURL_LIBDIRS ${NETTLE_LIBRARY_DIRS})
   list(APPEND LIBCURL_PC_REQUIRES_PRIVATE "gnutls" "nettle")
   include_directories(${GNUTLS_INCLUDE_DIRS} ${NETTLE_INCLUDE_DIRS})
+  link_directories(${NETTLE_LIBRARY_DIRS})
+  if(NETTLE_CFLAGS)
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${NETTLE_CFLAGS}")
+  endif()
 
   if(CURL_DEFAULT_SSL_BACKEND AND CURL_DEFAULT_SSL_BACKEND STREQUAL "gnutls")
     set(_valid_default_ssl_backend TRUE)
@@ -999,8 +1005,13 @@ if(USE_LIBIDN2)
   find_package(Libidn2)
   if(LIBIDN2_FOUND)
     set(CURL_LIBS "${LIBIDN2_LIBRARIES};${CURL_LIBS}")
+    list(APPEND CURL_LIBDIRS ${LIBIDN2_LIBRARY_DIRS})
     set(LIBCURL_PC_REQUIRES_PRIVATE "libidn2;${LIBCURL_PC_REQUIRES_PRIVATE}")
     include_directories(${LIBIDN2_INCLUDE_DIRS})
+    link_directories(${LIBIDN2_LIBRARY_DIRS})
+    if(LIBIDN2_CFLAGS)
+      set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${LIBIDN2_CFLAGS}")
+    endif()
     set(HAVE_IDN2_H 1)
     set(HAVE_LIBIDN2 1)
   endif()
@@ -1071,8 +1082,13 @@ if(NOT USE_LIBSSH2 AND CURL_USE_LIBSSH)
   find_package(Libssh REQUIRED)
   if(LIBSSH_FOUND)
     list(APPEND CURL_LIBS ${LIBSSH_LIBRARIES})
+    list(APPEND CURL_LIBDIRS ${LIBSSH_LIBRARY_DIRS})
     list(APPEND LIBCURL_PC_REQUIRES_PRIVATE "libssh")
     include_directories(${LIBSSH_INCLUDE_DIRS})
+    link_directories(${LIBSSH_LIBRARY_DIRS})
+    if(LIBSSH_CFLAGS)
+      set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${LIBSSH_CFLAGS}")
+    endif()
     set(USE_LIBSSH ON)
   endif()
 endif()
@@ -1101,7 +1117,13 @@ if(CURL_USE_GSASL)
   find_package(Libgsasl REQUIRED)
   if(LIBGSASL_FOUND)
     list(APPEND CURL_LIBS ${LIBGSASL_LIBRARIES})
+    list(APPEND CURL_LIBDIRS ${LIBGSASL_LIBRARY_DIRS})
     list(APPEND LIBCURL_PC_REQUIRES_PRIVATE "libgsasl")
+    include_directories(${LIBGSASL_INCLUDE_DIRS})
+    link_directories(${LIBGSASL_LIBRARY_DIRS})
+    if(LIBGSASL_CFLAGS)
+      set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${LIBGSASL_CFLAGS}")
+    endif()
     set(USE_GSASL ON)
   endif()
 endif()
@@ -1175,8 +1197,13 @@ if(CURL_USE_LIBUV)
   find_package(Libuv REQUIRED)
   if(LIBUV_FOUND)
     list(APPEND CURL_LIBS ${LIBUV_LIBRARIES})
+    list(APPEND CURL_LIBDIRS ${LIBUV_LIBRARY_DIRS})
     list(APPEND LIBCURL_PC_REQUIRES_PRIVATE "libuv")
     include_directories(${LIBUV_INCLUDE_DIRS})
+    link_directories(${LIBUV_LIBRARY_DIRS})
+    if(LIBUV_CFLAGS)
+      set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${LIBUV_CFLAGS}")
+    endif()
     set(USE_LIBUV ON)
     set(HAVE_UV_H ON)
   endif()
@@ -1936,6 +1963,10 @@ if(NOT CURL_DISABLE_INSTALL)
     endif()
   endforeach()
 
+  foreach(_lib IN LISTS CURL_LIBDIRS)
+    set(LIBCURL_PC_LIBS_PRIVATE "${LIBCURL_PC_LIBS_PRIVATE} -L${_lib}")
+  endforeach()
+
   foreach(_lib IN LISTS CMAKE_C_IMPLICIT_LINK_LIBRARIES CURL_LIBS)
     if(TARGET "${_lib}")
       set(_libname "${_lib}")
