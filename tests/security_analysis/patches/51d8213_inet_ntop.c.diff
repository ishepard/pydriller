@@ -74,7 +74,11 @@ static char *inet_ntop4(const unsigned char *src, char *dst, size_t size)
 
   len = strlen(tmp);
   if(len == 0 || len >= size) {
+#ifdef USE_WINSOCK
+    CURL_SETERRNO(WSAEINVAL);
+#else
     CURL_SETERRNO(ENOSPC);
+#endif
     return NULL;
   }
   strcpy(dst, tmp);
@@ -153,7 +157,6 @@ static char *inet_ntop6(const unsigned char *src, char *dst, size_t size)
     if(i == 6 && best.base == 0 &&
         (best.len == 6 || (best.len == 5 && words[5] == 0xffff))) {
       if(!inet_ntop4(src + 12, tp, sizeof(tmp) - (tp - tmp))) {
-        CURL_SETERRNO(ENOSPC);
         return NULL;
       }
       tp += strlen(tp);
@@ -171,7 +174,11 @@ static char *inet_ntop6(const unsigned char *src, char *dst, size_t size)
   /* Check for overflow, copy, and we are done.
    */
   if((size_t)(tp - tmp) > size) {
+#ifdef USE_WINSOCK
+    CURL_SETERRNO(WSAEINVAL);
+#else
     CURL_SETERRNO(ENOSPC);
+#endif
     return NULL;
   }
   strcpy(dst, tmp);
@@ -197,7 +204,7 @@ char *curlx_inet_ntop(int af, const void *src, char *buf, size_t size)
   case AF_INET6:
     return inet_ntop6((const unsigned char *)src, buf, size);
   default:
-    CURL_SETERRNO(EAFNOSUPPORT);
+    CURL_SETERRNO(SOCKEAFNOSUPPORT);
     return NULL;
   }
 }
