@@ -38,8 +38,7 @@
 #define THREAD_SIZE 16
 #define PER_THREAD_SIZE 8
 
-struct Ctx
-{
+struct Ctx {
   const char *URL;
   CURLSH *share;
   int result;
@@ -126,8 +125,8 @@ test_cleanup:
 
 #if defined(USE_THREADS_POSIX) || defined(USE_THREADS_WIN32)
 
-static void my_lock(CURL *handle, curl_lock_data data,
-                    curl_lock_access laccess, void *useptr)
+static void test_lock(CURL *handle, curl_lock_data data,
+                      curl_lock_access laccess, void *useptr)
 {
   curl_mutex_t *mutexes = (curl_mutex_t*) useptr;
   (void)handle;
@@ -135,14 +134,14 @@ static void my_lock(CURL *handle, curl_lock_data data,
   Curl_mutex_acquire(&mutexes[data]);
 }
 
-static void my_unlock(CURL *handle, curl_lock_data data, void *useptr)
+static void test_unlock(CURL *handle, curl_lock_data data, void *useptr)
 {
   curl_mutex_t *mutexes = (curl_mutex_t*) useptr;
   (void)handle;
   Curl_mutex_release(&mutexes[data]);
 }
 
-static void execute(struct Curl_share *share, struct Ctx *ctx)
+static void execute(CURLSH *share, struct Ctx *ctx)
 {
   int i;
   curl_mutex_t mutexes[CURL_LOCK_DATA_LAST - 1];
@@ -150,8 +149,8 @@ static void execute(struct Curl_share *share, struct Ctx *ctx)
   for(i = 0; i < CURL_LOCK_DATA_LAST - 1; i++) {
     Curl_mutex_init(&mutexes[i]);
   }
-  curl_share_setopt(share, CURLSHOPT_LOCKFUNC, my_lock);
-  curl_share_setopt(share, CURLSHOPT_UNLOCKFUNC, my_unlock);
+  curl_share_setopt(share, CURLSHOPT_LOCKFUNC, test_lock);
+  curl_share_setopt(share, CURLSHOPT_UNLOCKFUNC, test_unlock);
   curl_share_setopt(share, CURLSHOPT_USERDATA, (void *)mutexes);
   curl_share_setopt(share, CURLSHOPT_SHARE, CURL_LOCK_DATA_SSL_SESSION);
 
@@ -173,7 +172,7 @@ static void execute(struct Curl_share *share, struct Ctx *ctx)
 
 #else /* without pthread, run serially */
 
-static void execute(struct Curl_share *share, struct Ctx *ctx)
+static void execute(CURLSH *share, struct Ctx *ctx)
 {
   int i;
   (void) share;
