@@ -43,6 +43,7 @@
 #include "tool_main.h"
 #include "dynbuf.h"
 #include "tool_stderr.h"
+#include "var.h"
 
 #include "memdebug.h" /* keep this as LAST include */
 
@@ -50,17 +51,19 @@
 #  define USE_WATT32
 #endif
 
-#define GetStr(str,val) do { \
-  if(*(str)) { \
-    free(*(str)); \
-    *(str) = NULL; \
-  } \
-  if((val)) {              \
-    *(str) = strdup((val)); \
-    if(!(*(str)))          \
-      return PARAM_NO_MEM; \
-  } \
-} while(0)
+#define GetStr(str,val) do {                    \
+    if(*(str)) {                                \
+      free(*(str));                             \
+      *(str) = NULL;                            \
+    }                                           \
+    if((val)) {                                 \
+      *(str) = strdup((val));                   \
+      if(!(*(str))) {                           \
+        err = PARAM_NO_MEM;                     \
+        goto error;                             \
+      }                                         \
+    }                                           \
+  } while(0)
 
 struct LongShort {
   const char *letter; /* short name option */
@@ -354,6 +357,7 @@ static const struct LongShort aliases[]= {
   {"#",  "progress-bar",             ARG_BOOL},
   {"#m", "progress-meter",           ARG_BOOL},
   {":",  "next",                     ARG_NONE},
+  {":a", "variable",                 ARG_STRING},
 };
 
 /* Split the argument of -E to 'certname' and 'passphrase' separated by colon.
@@ -662,6 +666,8 @@ static ParameterError data_urlencode(struct GlobalConfig *global,
   *postp = postdata;
   *lenp = size;
   return PARAM_OK;
+error:
+  return err;
 }
 
 static void sethttpver(struct GlobalConfig *global,
@@ -692,9 +698,10 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
   int hit = -1;
   bool longopt = FALSE;
   bool singleopt = FALSE; /* when true means '-o foo' used '-ofoo' */
-  ParameterError err;
+  ParameterError err = PARAM_OK;
   bool toggle = TRUE; /* how to switch boolean options, on or off. Controlled
                          by using --OPTION or --no-OPTION */
+  bool nextalloc = FALSE; /* if nextarg is allocated */
   static const char *redir_protos[] = {
     "http",
     "https",
@@ -716,6 +723,7 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
     size_t fnam = strlen(word);
     int numhits = 0;
     bool noflagged = FALSE;
+    bool expand = FALSE;
 
     if(!strncmp(word, "no-", 3)) {
       /* disable this option but ignore the "no-" part when looking for it */
@@ -723,6 +731,11 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
       toggle = FALSE;
       noflagged = TRUE;
     }
+    else if(!strncmp(word, "expand-", 7)) {
+      /* variable expansions is to be done on the argument */
+      word += 7;
+      expand = TRUE;
+    }
 
     for(j = 0; j < sizeof(aliases)/sizeof(aliases[0]); j++) {
       if(curl_strnequal(aliases[j].lname, word, fnam)) {
@@ -740,14 +753,37 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
     }
     if(numhits > 1) {
       /* this is at least the second match! */
-      return PARAM_OPTION_AMBIGUOUS;
+      err = PARAM_OPTION_AMBIGUOUS;
+      goto error;
     }
-    if(hit < 0) {
-      return PARAM_OPTION_UNKNOWN;
+    else if(hit < 0) {
+      err = PARAM_OPTION_UNKNOWN;
+      goto error;
     }
-    if(noflagged && (aliases[hit].desc != ARG_BOOL))
+    else if(noflagged && (aliases[hit].desc != ARG_BOOL)) {
       /* --no- prefixed an option that isn't boolean! */
-      return PARAM_NO_NOT_BOOLEAN;
+      err = PARAM_NO_NOT_BOOLEAN;
+      goto error;
+    }
+    else if(expand) {
+      struct curlx_dynbuf nbuf;
+      bool replaced;
+
+      if(aliases[hit].desc != ARG_STRING) {
+        /* --expand on an option that isn't a string */
+        err = PARAM_EXPAND_ERROR;
+        goto error;
+      }
+      err = varexpand(global, nextarg, &nbuf, &replaced);
+      if(err) {
+        curlx_dyn_free(&nbuf);
+        goto error;
+      }
+      if(replaced) {
+        nextarg = curlx_dyn_ptr(&nbuf);
+        nextalloc = TRUE;
+      }
+    }
   }
   else {
     flag++; /* prefixed with one dash, pass it */
@@ -775,7 +811,8 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         }
       }
       if(hit < 0) {
-        return PARAM_OPTION_UNKNOWN;
+        err = PARAM_OPTION_UNKNOWN;
+        break;
       }
     }
 
@@ -785,8 +822,10 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         nextarg = (char *)&parse[1]; /* this is the actual extra parameter */
         singleopt = TRUE;   /* don't loop anymore after this */
       }
-      else if(!nextarg)
-        return PARAM_REQUIRES_PARAMETER;
+      else if(!nextarg) {
+        err = PARAM_REQUIRES_PARAMETER;
+        break;
+      }
       else {
 #ifdef HAVE_WRITABLE_ARGV
         clearthis = cleararg;
@@ -801,21 +840,27 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
               nextarg);
       }
     }
-    else if((aliases[hit].desc == ARG_NONE) && !toggle)
-      return PARAM_NO_PREFIX;
+    else if((aliases[hit].desc == ARG_NONE) && !toggle) {
+      err = PARAM_NO_PREFIX;
+      break;
+    }
 
     switch(letter) {
     case '*': /* options without a short option */
       switch(subletter) {
       case '4': /* --dns-ipv4-addr */
-        if(!curlinfo->ares_num) /* c-ares is needed for this */
-          return PARAM_LIBCURL_DOESNT_SUPPORT;
+        if(!curlinfo->ares_num) { /* c-ares is needed for this */
+          err = PARAM_LIBCURL_DOESNT_SUPPORT;
+          break;
+        }
         /* addr in dot notation */
         GetStr(&config->dns_ipv4_addr, nextarg);
         break;
       case '6': /* --dns-ipv6-addr */
-        if(!curlinfo->ares_num) /* c-ares is needed for this */
-          return PARAM_LIBCURL_DOESNT_SUPPORT;
+        if(!curlinfo->ares_num) { /* c-ares is needed for this */
+          err = PARAM_LIBCURL_DOESNT_SUPPORT;
+          break;
+        }
         /* addr in dot notation */
         GetStr(&config->dns_ipv6_addr, nextarg);
         break;
@@ -830,8 +875,6 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         break;
       case 'c': /* connect-timeout */
         err = secs2ms(&config->connecttimeout_ms, nextarg);
-        if(err)
-          return err;
         break;
       case 'C': /* doh-url */
         GetStr(&config->doh_url, nextarg);
@@ -844,9 +887,10 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         break;
       case 'D': /* --dns-interface */
         if(!curlinfo->ares_num) /* c-ares is needed for this */
-          return PARAM_LIBCURL_DOESNT_SUPPORT;
-        /* interface name */
-        GetStr(&config->dns_interface, nextarg);
+          err = PARAM_LIBCURL_DOESNT_SUPPORT;
+        else
+          /* interface name */
+          GetStr(&config->dns_interface, nextarg);
         break;
       case 'e': /* --disable-epsv */
         config->disable_epsv = toggle;
@@ -859,9 +903,10 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         break;
       case 'F': /* --dns-servers */
         if(!curlinfo->ares_num) /* c-ares is needed for this */
-          return PARAM_LIBCURL_DOESNT_SUPPORT;
-        /* IP addrs of DNS servers */
-        GetStr(&config->dns_servers, nextarg);
+          err = PARAM_LIBCURL_DOESNT_SUPPORT;
+        else
+          /* IP addrs of DNS servers */
+          GetStr(&config->dns_servers, nextarg);
         break;
       case 'g': /* --trace */
         GetStr(&global->trace_dump, nextarg);
@@ -885,10 +930,9 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
       case 'i': /* --limit-rate */
       {
         curl_off_t value;
-        ParameterError pe = GetSizeParameter(global, nextarg, "rate", &value);
-
-        if(pe != PARAM_OK)
-          return pe;
+        err = GetSizeParameter(global, nextarg, "rate", &value);
+        if(err)
+          break;
         config->recvpersecond = value;
         config->sendpersecond = value;
       }
@@ -907,15 +951,20 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         long denominator;
         long numerator = 60*60*1000; /* default per hour */
         size_t numlen = div ? (size_t)(div - nextarg) : strlen(nextarg);
-        if(numlen > sizeof(number)-1)
-          return PARAM_NUMBER_TOO_LARGE;
+        if(numlen > sizeof(number)-1) {
+          err = PARAM_NUMBER_TOO_LARGE;
+          break;
+        }
         strncpy(number, nextarg, numlen);
         number[numlen] = 0;
         err = str2unum(&denominator, number);
         if(err)
-          return err;
-        if(denominator < 1)
-          return PARAM_BAD_USE;
+          break;
+
+        if(denominator < 1) {
+          err = PARAM_BAD_USE;
+          break;
+        }
         if(div) {
           char unit = div[1];
           switch(unit) {
@@ -932,7 +981,8 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
             break;
           default:
             errorf(global, "unsupported --rate unit");
-            return PARAM_BAD_USE;
+            err = PARAM_BAD_USE;
+            break;
           }
         }
         global->ms_per_transfer = numerator/denominator;
@@ -940,8 +990,10 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
       break;
 
       case 'j': /* --compressed */
-        if(toggle && !(feature_libz || feature_brotli || feature_zstd))
-          return PARAM_LIBCURL_DOESNT_SUPPORT;
+        if(toggle && !(feature_libz || feature_brotli || feature_zstd)) {
+          err = PARAM_LIBCURL_DOESNT_SUPPORT;
+          break;
+        }
         config->encoding = toggle;
         break;
 
@@ -961,8 +1013,10 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
           config->authtype &= ~CURLAUTH_NEGOTIATE;
         else if(feature_spnego)
           config->authtype |= CURLAUTH_NEGOTIATE;
-        else
-          return PARAM_LIBCURL_DOESNT_SUPPORT;
+        else {
+          err = PARAM_LIBCURL_DOESNT_SUPPORT;
+          break;
+        }
         break;
 
       case 'm': /* --ntlm */
@@ -970,8 +1024,10 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
           config->authtype &= ~CURLAUTH_NTLM;
         else if(feature_ntlm)
           config->authtype |= CURLAUTH_NTLM;
-        else
-          return PARAM_LIBCURL_DOESNT_SUPPORT;
+        else {
+          err = PARAM_LIBCURL_DOESNT_SUPPORT;
+          break;
+        }
         break;
 
       case 'M': /* --ntlm-wb */
@@ -979,8 +1035,10 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
           config->authtype &= ~CURLAUTH_NTLM_WB;
         else if(feature_ntlm_wb)
           config->authtype |= CURLAUTH_NTLM_WB;
-        else
-          return PARAM_LIBCURL_DOESNT_SUPPORT;
+        else {
+          err = PARAM_LIBCURL_DOESNT_SUPPORT;
+          break;
+        }
         break;
 
       case 'n': /* --basic for completeness */
@@ -1011,8 +1069,6 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
 
       case 'R': /* --create-file-mode */
         err = oct2nummax(&config->create_file_mode, nextarg, 0777);
-        if(err)
-          return err;
         break;
 
       case 's': /* --max-redirs */
@@ -1020,14 +1076,16 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
            special condition */
         err = str2num(&config->maxredirs, nextarg);
         if(err)
-          return err;
+          break;
         if(config->maxredirs < -1)
-          return PARAM_BAD_NUMERIC;
+          err = PARAM_BAD_NUMERIC;
         break;
 
       case 't': /* --proxy-ntlm */
-        if(!feature_ntlm)
-          return PARAM_LIBCURL_DOESNT_SUPPORT;
+        if(!feature_ntlm) {
+          err = PARAM_LIBCURL_DOESNT_SUPPORT;
+          break;
+        }
         config->proxyntlm = toggle;
         break;
 
@@ -1050,8 +1108,10 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         break;
       case 'x': /* --krb */
         /* kerberos level string */
-        if(!feature_spnego)
-          return PARAM_LIBCURL_DOESNT_SUPPORT;
+        if(!feature_spnego) {
+          err = PARAM_LIBCURL_DOESNT_SUPPORT;
+          break;
+        }
         GetStr(&config->krblevel, nextarg);
         break;
       case 'X': /* --haproxy-protocol */
@@ -1063,11 +1123,10 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
       case 'y': /* --max-filesize */
         {
           curl_off_t value;
-          ParameterError pe =
+          err =
             GetSizeParameter(global, nextarg, "max-filesize", &value);
-
-          if(pe != PARAM_OK)
-            return pe;
+          if(err)
+            break;
           config->max_filesize = value;
         }
         break;
@@ -1103,8 +1162,10 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
           /* there was no free node, create one! */
           config->url_get = url = new_getout(config);
 
-        if(!url)
-          return PARAM_NO_MEM;
+        if(!url) {
+          err = PARAM_NO_MEM;
+          break;
+        }
 
         /* fill in the URL */
         GetStr(&url->url, nextarg);
@@ -1115,8 +1176,10 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
     case '$': /* more options without a short option */
       switch(subletter) {
       case 'a': /* --ssl */
-        if(toggle && !feature_ssl)
-          return PARAM_LIBCURL_DOESNT_SUPPORT;
+        if(toggle && !feature_ssl) {
+          err = PARAM_LIBCURL_DOESNT_SUPPORT;
+          break;
+        }
         config->ftp_ssl = toggle;
         if(config->ftp_ssl)
           warnf(global,
@@ -1154,29 +1217,25 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         break;
       case 'g': /* --retry */
         err = str2unum(&config->req_retry, nextarg);
-        if(err)
-          return err;
         break;
       case 'V': /* --retry-connrefused */
         config->retry_connrefused = toggle;
         break;
       case 'h': /* --retry-delay */
         err = str2unummax(&config->retry_delay, nextarg, LONG_MAX/1000);
-        if(err)
-          return err;
         break;
       case 'i': /* --retry-max-time */
         err = str2unummax(&config->retry_maxtime, nextarg, LONG_MAX/1000);
-        if(err)
-          return err;
         break;
       case '!': /* --retry-all-errors */
         config->retry_all_errors = toggle;
         break;
 
       case 'k': /* --proxy-negotiate */
-        if(!feature_spnego)
-          return PARAM_LIBCURL_DOESNT_SUPPORT;
+        if(!feature_spnego) {
+          err = PARAM_LIBCURL_DOESNT_SUPPORT;
+          break;
+        }
         config->proxynegotiate = toggle;
         break;
 
@@ -1220,17 +1279,21 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
           rc = 0;
 
         err = str2unum(&config->localport, nextarg);
-        if(err || (config->localport > 65535))
-          return PARAM_BAD_USE;
+        if(err || (config->localport > 65535)) {
+          err = PARAM_BAD_USE;
+          break;
+        }
         if(!rc)
           config->localportrange = 1; /* default number of ports to try */
         else {
           err = str2unum(&config->localportrange, lrange);
           if(err || (config->localportrange > 65535))
-            return PARAM_BAD_USE;
-          config->localportrange -= (config->localport-1);
-          if(config->localportrange < 1)
-            return PARAM_BAD_USE;
+            err = PARAM_BAD_USE;
+          else {
+            config->localportrange -= (config->localport-1);
+            if(config->localportrange < 1)
+              err = PARAM_BAD_USE;
+          }
         }
         break;
       }
@@ -1238,16 +1301,20 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         GetStr(&config->ftp_alternative_to_user, nextarg);
         break;
       case 'v': /* --ssl-reqd */
-        if(toggle && !feature_ssl)
-          return PARAM_LIBCURL_DOESNT_SUPPORT;
+        if(toggle && !feature_ssl) {
+          err = PARAM_LIBCURL_DOESNT_SUPPORT;
+          break;
+        }
         config->ftp_ssl_reqd = toggle;
         break;
       case 'w': /* --no-sessionid */
         config->disable_sessionid = (!toggle)?TRUE:FALSE;
         break;
       case 'x': /* --ftp-ssl-control */
-        if(toggle && !feature_ssl)
-          return PARAM_LIBCURL_DOESNT_SUPPORT;
+        if(toggle && !feature_ssl) {
+          err = PARAM_LIBCURL_DOESNT_SUPPORT;
+          break;
+        }
         config->ftp_ssl_control = toggle;
         break;
       case 'y': /* --ftp-ssl-ccc */
@@ -1263,7 +1330,8 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
 #ifdef CURL_DISABLE_LIBCURL_OPTION
         warnf(global,
               "--libcurl option was disabled at build-time");
-        return PARAM_OPTION_UNKNOWN;
+        err = PARAM_OPTION_UNKNOWN;
+        break;
 #else
         GetStr(&global->libcurl, nextarg);
         break;
@@ -1279,8 +1347,6 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         break;
       case '3': /* --keepalive-time */
         err = str2unum(&config->alivetime, nextarg);
-        if(err)
-          return err;
         break;
       case '4': /* --post302 */
         config->post302 = toggle;
@@ -1302,8 +1368,6 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         break;
       case '9': /* --tftp-blksize */
         err = str2unum(&config->tftp_blksize, nextarg);
-        if(err)
-          return err;
         break;
       case 'A': /* --mail-from */
         GetStr(&config->mail_from, nextarg);
@@ -1311,8 +1375,6 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
       case 'B': /* --mail-rcpt */
         /* append receiver to a list */
         err = add2list(&config->mail_rcpt, nextarg);
-        if(err)
-          return err;
         break;
       case 'C': /* --ftp-pret */
         config->ftp_pret = toggle;
@@ -1320,18 +1382,17 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
       case 'D': /* --proto */
         config->proto_present = TRUE;
         err = proto2num(config, built_in_protos, &config->proto_str, nextarg);
-        if(err)
-          return err;
         break;
       case 'E': /* --proto-redir */
         config->proto_redir_present = TRUE;
-        if(proto2num(config, redir_protos, &config->proto_redir_str, nextarg))
-          return PARAM_BAD_USE;
+        if(proto2num(config, redir_protos, &config->proto_redir_str,
+                     nextarg)) {
+          err = PARAM_BAD_USE;
+          break;
+        }
         break;
       case 'F': /* --resolve */
         err = add2list(&config->resolve, nextarg);
-        if(err)
-          return err;
         break;
       case 'G': /* --delegation LEVEL */
         config->gssapi_delegation = delegation(config, nextarg);
@@ -1341,7 +1402,8 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         break;
       case 'J': /* --metalink */
         errorf(global, "--metalink is disabled");
-        return PARAM_BAD_USE;
+        err = PARAM_BAD_USE;
+        break;
       case '6': /* --sasl-authzid */
         GetStr(&config->sasl_authzid, nextarg);
         break;
@@ -1371,21 +1433,15 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
       case 'Q': /* --proto-default */
         GetStr(&config->proto_default, nextarg);
         err = check_protocol(config->proto_default);
-        if(err)
-          return err;
         break;
       case 'R': /* --expect100-timeout */
         err = secs2ms(&config->expect100timeout_ms, nextarg);
-        if(err)
-          return err;
         break;
       case 'S': /* --tftp-no-options */
         config->tftp_no_options = toggle;
         break;
       case 'U': /* --connect-to */
         err = add2list(&config->connect_to, nextarg);
-        if(err)
-          return err;
         break;
       case 'W': /* --abstract-unix-socket */
         config->abstract_unix_socket = TRUE;
@@ -1393,8 +1449,6 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         break;
       case 'X': /* --tls-max */
         err = str2tls_max(&config->ssl_version_max, nextarg);
-        if(err)
-          return err;
         break;
       case 'Y': /* --suppress-connect-headers */
         config->suppress_connect_headers = toggle;
@@ -1404,8 +1458,6 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         break;
       case '~': /* --happy-eyeballs-timeout-ms */
         err = str2unum(&config->happy_eyeballs_timeout_ms, nextarg);
-        if(err)
-          return err;
         /* 0 is a valid value for this timeout */
         break;
       case '%': /* --trace-ids */
@@ -1424,8 +1476,16 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         break;
       }
       break;
-    case ':': /* --next */
-      return PARAM_NEXT_OPERATION;
+    case ':':
+      switch(subletter) {
+      case 'a': /* --variable */
+        err = setvariable(global, nextarg);
+        break;
+      default:  /* --next */
+        err = PARAM_NEXT_OPERATION;
+        break;
+      }
+      break;
     case '0': /* --http* options */
       switch(subletter) {
       case '\0':
@@ -1450,14 +1510,18 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         break;
       case '4': /* --http3 */
         /* Try HTTP/3, allow fallback */
-        if(!feature_http3)
-          return PARAM_LIBCURL_DOESNT_SUPPORT;
+        if(!feature_http3) {
+          err = PARAM_LIBCURL_DOESNT_SUPPORT;
+          break;
+        }
         sethttpver(global, config, CURL_HTTP_VERSION_3);
         break;
       case '5': /* --http3-only */
         /* Try HTTP/3 without fallback */
-        if(!feature_http3)
-          return PARAM_LIBCURL_DOESNT_SUPPORT;
+        if(!feature_http3) {
+          err = PARAM_LIBCURL_DOESNT_SUPPORT;
+          break;
+        }
         sethttpver(global, config, CURL_HTTP_VERSION_3ONLY);
         break;
       case '9':
@@ -1530,13 +1594,15 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
       switch(subletter) {
       case 'a': /* --alt-svc */
         if(!feature_altsvc)
-          return PARAM_LIBCURL_DOESNT_SUPPORT;
-        GetStr(&config->altsvc, nextarg);
+          err = PARAM_LIBCURL_DOESNT_SUPPORT;
+        else
+          GetStr(&config->altsvc, nextarg);
         break;
       case 'b': /* --hsts */
         if(!feature_hsts)
-          return PARAM_LIBCURL_DOESNT_SUPPORT;
-        GetStr(&config->hsts, nextarg);
+          err = PARAM_LIBCURL_DOESNT_SUPPORT;
+        else
+          GetStr(&config->hsts, nextarg);
         break;
       default:  /* --cookie string coming up: */
         if(nextarg[0] == '@') {
@@ -1545,14 +1611,10 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         else if(strchr(nextarg, '=')) {
           /* A cookie string must have a =-letter */
           err = add2list(&config->cookies, nextarg);
-          if(err)
-            return err;
           break;
         }
         /* We have a cookie file to read from! */
         err = add2list(&config->cookiefiles, nextarg);
-        if(err)
-          return err;
       }
       break;
     case 'B':
@@ -1568,7 +1630,7 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
       if(strcmp(nextarg, "-")) {
         err = str2offset(&config->resume_from, nextarg);
         if(err)
-          return err;
+          break;
         config->resume_from_current = FALSE;
       }
       else {
@@ -1594,21 +1656,25 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         if(*nextarg == '+') {
           /* use without encoding */
           query = strdup(&nextarg[1]);
-          if(!query)
-            return PARAM_NO_MEM;
+          if(!query) {
+            err = PARAM_NO_MEM;
+            break;
+          }
         }
         else {
           err = data_urlencode(global, nextarg, &query, &size);
           if(err)
-            return err;
+            break;
         }
 
         if(config->query) {
           CURLcode result =
             curlx_dyn_addf(&dyn, "%s&%s", config->query, query);
           free(query);
-          if(result)
-            return PARAM_NO_MEM;
+          if(result) {
+            err = PARAM_NO_MEM;
+            break;
+          }
           free(config->query);
           config->query = curlx_dyn_ptr(&dyn);
         }
@@ -1620,7 +1686,7 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
       else if(subletter == 'e') { /* --data-urlencode */
         err = data_urlencode(global, nextarg, &postdata, &size);
         if(err)
-          return err;
+          break;
       }
       else if('@' == *nextarg && !raw_mode) {
         /* the data begins with a '@' letter, it means that a file name
@@ -1652,14 +1718,16 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         if(file && (file != stdin))
           fclose(file);
         if(err)
-          return err;
+          break;
 
         if(!postdata) {
           /* no data from the file, point to a zero byte string to make this
              get sent as a POST anyway */
           postdata = strdup("");
-          if(!postdata)
-            return PARAM_NO_MEM;
+          if(!postdata) {
+            err = PARAM_NO_MEM;
+            break;
+          }
         }
       }
       else {
@@ -1680,7 +1748,8 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         if(!config->postfields) {
           Curl_safefree(oldpost);
           Curl_safefree(postdata);
-          return PARAM_NO_MEM;
+          err = PARAM_NO_MEM;
+          break;
         }
         memcpy(config->postfields, oldpost, (size_t)oldlen);
         if(subletter != 'f') {
@@ -1763,8 +1832,10 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         break;
       case 'f': /* crypto engine */
         GetStr(&config->engine, nextarg);
-        if(config->engine && curl_strequal(config->engine, "list"))
-          return PARAM_ENGINES_REQUESTED;
+        if(config->engine && curl_strequal(config->engine, "list")) {
+          err = PARAM_ENGINES_REQUESTED;
+          break;
+        }
         break;
       case 'g': /* CA cert directory */
         GetStr(&config->capath, nextarg);
@@ -1774,8 +1845,10 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         break;
       case 'i': /* --hostpubmd5 md5 of the host public key */
         GetStr(&config->hostpubmd5, nextarg);
-        if(!config->hostpubmd5 || strlen(config->hostpubmd5) != 32)
-          return PARAM_BAD_USE;
+        if(!config->hostpubmd5 || strlen(config->hostpubmd5) != 32) {
+          err = PARAM_BAD_USE;
+          break;
+        }
         break;
       case 'F': /* --hostpubsha256 sha256 of the host public key */
         GetStr(&config->hostpubsha256, nextarg);
@@ -1786,7 +1859,8 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
       case 'k': /* TLS username */
         if(!feature_tls_srp) {
           cleanarg(clearthis);
-          return PARAM_LIBCURL_DOESNT_SUPPORT;
+          err = PARAM_LIBCURL_DOESNT_SUPPORT;
+          break;
         }
         GetStr(&config->tls_username, nextarg);
         cleanarg(clearthis);
@@ -1794,17 +1868,22 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
       case 'l': /* TLS password */
         if(!feature_tls_srp) {
           cleanarg(clearthis);
-          return PARAM_LIBCURL_DOESNT_SUPPORT;
+          err = PARAM_LIBCURL_DOESNT_SUPPORT;
+          break;
         }
         GetStr(&config->tls_password, nextarg);
         cleanarg(clearthis);
         break;
       case 'm': /* TLS authentication type */
-        if(!feature_tls_srp)
-          return PARAM_LIBCURL_DOESNT_SUPPORT;
+        if(!feature_tls_srp) {
+          err = PARAM_LIBCURL_DOESNT_SUPPORT;
+          break;
+        }
         GetStr(&config->tls_authtype, nextarg);
-        if(!curl_strequal(config->tls_authtype, "SRP"))
-          return PARAM_LIBCURL_DOESNT_SUPPORT; /* only support TLS-SRP */
+        if(!curl_strequal(config->tls_authtype, "SRP")) {
+          err = PARAM_LIBCURL_DOESNT_SUPPORT; /* only support TLS-SRP */
+          break;
+        }
         break;
       case 'n': /* no empty SSL fragments, --ssl-allow-beast */
         if(feature_ssl)
@@ -1857,24 +1936,32 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
 
       case 'u': /* TLS username for proxy */
         cleanarg(clearthis);
-        if(!feature_tls_srp)
-          return PARAM_LIBCURL_DOESNT_SUPPORT;
+        if(!feature_tls_srp) {
+          err = PARAM_LIBCURL_DOESNT_SUPPORT;
+          break;
+        }
         GetStr(&config->proxy_tls_username, nextarg);
         break;
 
       case 'v': /* TLS password for proxy */
         cleanarg(clearthis);
-        if(!feature_tls_srp)
-          return PARAM_LIBCURL_DOESNT_SUPPORT;
+        if(!feature_tls_srp) {
+          err = PARAM_LIBCURL_DOESNT_SUPPORT;
+          break;
+        }
         GetStr(&config->proxy_tls_password, nextarg);
         break;
 
       case 'w': /* TLS authentication type for proxy */
-        if(!feature_tls_srp)
-          return PARAM_LIBCURL_DOESNT_SUPPORT;
+        if(!feature_tls_srp) {
+          err = PARAM_LIBCURL_DOESNT_SUPPORT;
+          break;
+        }
         GetStr(&config->proxy_tls_authtype, nextarg);
-        if(!curl_strequal(config->proxy_tls_authtype, "SRP"))
-          return PARAM_LIBCURL_DOESNT_SUPPORT; /* only support TLS-SRP */
+        if(!curl_strequal(config->proxy_tls_authtype, "SRP")) {
+          err = PARAM_LIBCURL_DOESNT_SUPPORT; /* only support TLS-SRP */
+          break;
+        }
         break;
 
       case 'x': /* certificate file for proxy */
@@ -1963,7 +2050,8 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         break;
 
       default: /* unknown flag */
-        return PARAM_OPTION_UNKNOWN;
+        err = PARAM_OPTION_UNKNOWN;
+        break;
       }
       break;
     case 'f':
@@ -1990,7 +2078,8 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
       if(config->failonerror && config->failwithbody) {
         errorf(config->global, "You must select either --fail or "
                "--fail-with-body, not both.");
-        return PARAM_BAD_USE;
+        err = PARAM_BAD_USE;
+        break;
       }
       break;
     case 'F':
@@ -2000,10 +2089,15 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
                    nextarg,
                    &config->mimeroot,
                    &config->mimecurrent,
-                   (subletter == 's')?TRUE:FALSE)) /* 's' is literal string */
-        return PARAM_BAD_USE;
-      if(SetHTTPrequest(config, HTTPREQ_MIMEPOST, &config->httpreq))
-        return PARAM_BAD_USE;
+                   (subletter == 's')?TRUE:FALSE)) { /* 's' is literal
+                                                        string */
+        err = PARAM_BAD_USE;
+        break;
+      }
+      if(SetHTTPrequest(config, HTTPREQ_MIMEPOST, &config->httpreq)) {
+        err = PARAM_BAD_USE;
+        break;
+      }
       break;
 
     case 'g': /* g disables URLglobbing */
@@ -2022,10 +2116,13 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
       if(toggle) {
         if(nextarg) {
           global->help_category = strdup(nextarg);
-          if(!global->help_category)
-            return PARAM_NO_MEM;
+          if(!global->help_category) {
+            err = PARAM_NO_MEM;
+            break;
+          }
         }
-        return PARAM_HELP_REQUESTED;
+        err = PARAM_HELP_REQUESTED;
+        break;
       }
       /* we now actually support --no-help too! */
       break;
@@ -2059,7 +2156,7 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
           if(!use_stdin)
             fclose(file);
           if(err)
-            return err;
+            break;
         }
       }
       else {
@@ -2067,8 +2164,6 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
           err = add2list(&config->proxyheaders, nextarg);
         else
           err = add2list(&config->headers, nextarg);
-        if(err)
-          return err;
       }
       break;
     case 'i':
@@ -2083,8 +2178,10 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
       config->show_headers = toggle;
       if(SetHTTPrequest(config,
                         (config->no_body)?HTTPREQ_HEAD:HTTPREQ_GET,
-                        &config->httpreq))
-        return PARAM_BAD_USE;
+                        &config->httpreq)) {
+        err = PARAM_BAD_USE;
+        break;
+      }
       break;
     case 'J': /* --remote-header-name */
       config->content_disposition = toggle;
@@ -2098,7 +2195,8 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
     case 'K': /* parse config file */
       if(parseconfig(nextarg, global)) {
         errorf(global, "cannot read config from '%s'", nextarg);
-        return PARAM_READ_ERROR;
+        err = PARAM_READ_ERROR;
+        break;
       }
       break;
     case 'l':
@@ -2117,8 +2215,6 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
     case 'm':
       /* specified max time */
       err = secs2ms(&config->timeout_ms, nextarg);
-      if(err)
-        return err;
       break;
     case 'M': /* M for manual, huge help */
       if(toggle) { /* --no-manual shows no manual... */
@@ -2126,7 +2222,8 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         warnf(global,
               "built-in manual was disabled at build-time");
 #endif
-        return PARAM_MANUAL_REQUESTED;
+        err = PARAM_MANUAL_REQUESTED;
+        break;
       }
       break;
     case 'n':
@@ -2188,14 +2285,17 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         config->url_out = url = new_getout(config);
       }
 
-      if(!url)
-        return PARAM_NO_MEM;
+      if(!url) {
+        err = PARAM_NO_MEM;
+        break;
+      }
 
       /* fill in the outfile */
       if('o' == letter) {
         if(!*nextarg) {
           warnf(global, "output file name has no length");
-          return PARAM_BAD_USE;
+          err = PARAM_BAD_USE;
+          break;
         }
         GetStr(&url->outfile, nextarg);
         url->flags &= ~GETOUT_USEREMOTE; /* switch off */
@@ -2243,8 +2343,6 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         err = add2list(&config->quote, nextarg);
         break;
       }
-      if(err)
-        return err;
       break;
     case 'r':
       /* Specifying a range WITHOUT A DASH will create an illegal HTTP range
@@ -2256,7 +2354,8 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         curl_off_t off;
         if(curlx_strtoofft(nextarg, NULL, 10, &off)) {
           warnf(global, "unsupported range point");
-          return PARAM_BAD_USE;
+          err = PARAM_BAD_USE;
+          break;
         }
         warnf(global,
               "A specified range MUST include at least one dash (-). "
@@ -2264,8 +2363,10 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         msnprintf(buffer, sizeof(buffer), "%" CURL_FORMAT_CURL_OFF_T "-", off);
         Curl_safefree(config->range);
         config->range = strdup(buffer);
-        if(!config->range)
-          return PARAM_NO_MEM;
+        if(!config->range) {
+          err = PARAM_NO_MEM;
+          break;
+        }
       }
       else {
         /* byte range requested */
@@ -2296,8 +2397,6 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
     case 't':
       /* Telnet options */
       err = add2list(&config->telnet_options, nextarg);
-      if(err)
-        return err;
       break;
     case 'T':
       /* we are uploading */
@@ -2321,8 +2420,10 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         /* there was no free node, create one! */
         config->url_ul = url = new_getout(config);
 
-      if(!url)
-        return PARAM_NO_MEM;
+      if(!url) {
+        err = PARAM_NO_MEM;
+        break;
+      }
 
       url->flags |= GETOUT_UPLOAD; /* mark -T used */
       if(!*nextarg)
@@ -2348,8 +2449,10 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         /* the '%' thing here will cause the trace get sent to stderr */
         Curl_safefree(global->trace_dump);
         global->trace_dump = strdup("%");
-        if(!global->trace_dump)
-          return PARAM_NO_MEM;
+        if(!global->trace_dump) {
+          err = PARAM_NO_MEM;
+          break;
+        }
         if(global->tracetype && (global->tracetype != TRACE_PLAIN))
           warnf(global,
                 "-v, --verbose overrides an earlier trace/verbose option");
@@ -2360,8 +2463,10 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         global->tracetype = TRACE_NONE;
       break;
     case 'V':
-      if(toggle)    /* --no-version yields no output! */
-        return PARAM_VERSION_INFO_REQUESTED;
+      if(toggle) {   /* --no-version yields no output! */
+        err = PARAM_VERSION_INFO_REQUESTED;
+        break;
+      }
       break;
 
     case 'w':
@@ -2385,7 +2490,7 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         if(file && (file != stdin))
           fclose(file);
         if(err)
-          return err;
+          break;
         if(!config->writeout)
           warnf(global, "Failed to read %s", fname);
       }
@@ -2413,7 +2518,7 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
       /* low speed time */
       err = str2unum(&config->low_speed_time, nextarg);
       if(err)
-        return err;
+        break;
       if(!config->low_speed_limit)
         config->low_speed_limit = 1;
       break;
@@ -2421,7 +2526,7 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
       /* low speed limit */
       err = str2unum(&config->low_speed_limit, nextarg);
       if(err)
-        return err;
+        break;
       if(!config->low_speed_time)
         config->low_speed_time = 30;
       break;
@@ -2434,7 +2539,7 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
         long val;
         err = str2unum(&val, nextarg);
         if(err)
-          return err;
+          break;
         if(val > MAX_PARALLEL)
           global->parallel_max = MAX_PARALLEL;
         else if(val < 1)
@@ -2488,13 +2593,17 @@ ParameterError getparameter(const char *flag, /* f or -long-flag */
       }
       break;
     default: /* unknown flag */
-      return PARAM_OPTION_UNKNOWN;
+      err = PARAM_OPTION_UNKNOWN;
+      break;
     }
     hit = -1;
 
-  } while(!longopt && !singleopt && *++parse && !*usedarg);
+  } while(!longopt && !singleopt && *++parse && !*usedarg && !err);
 
-  return PARAM_OK;
+error:
+  if(nextalloc)
+    free(nextarg);
+  return err;
 }
 
 ParameterError parse_args(struct GlobalConfig *global, int argc,
