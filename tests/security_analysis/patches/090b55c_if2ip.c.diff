@@ -83,42 +83,59 @@ bool Curl_if_is_interface_name(const char *interf)
   return result;
 }
 
-char *Curl_if2ip(int af, const char *interf, char *buf, int buf_size)
+if2ip_result_t Curl_if2ip(int af, unsigned int remote_scope,
+                          const char *interf, char *buf, int buf_size)
 {
   struct ifaddrs *iface, *head;
-  char *ip = NULL;
+  if2ip_result_t res = IF2IP_NOT_FOUND;
 
   if(getifaddrs(&head) >= 0) {
     for(iface=head; iface != NULL; iface=iface->ifa_next) {
-      if((iface->ifa_addr != NULL) &&
-         (iface->ifa_addr->sa_family == af) &&
-         curl_strequal(iface->ifa_name, interf)) {
-        void *addr;
-        char scope[12]="";
-        char ipstr[64];
+      if(iface->ifa_addr != NULL) {
+        if(iface->ifa_addr->sa_family == af) {
+          if(curl_strequal(iface->ifa_name, interf)) {
+            void *addr;
+            char *ip;
+            char scope[12]="";
+            char ipstr[64];
 #ifdef ENABLE_IPV6
-        if(af == AF_INET6) {
-          unsigned int scopeid = 0;
-          addr = &((struct sockaddr_in6 *)iface->ifa_addr)->sin6_addr;
+            if(af == AF_INET6) {
+              unsigned int scopeid = 0;
+              addr = &((struct sockaddr_in6 *)iface->ifa_addr)->sin6_addr;
 #ifdef HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID
-          /* Include the scope of this interface as part of the address */
-          scopeid = ((struct sockaddr_in6 *)iface->ifa_addr)->sin6_scope_id;
+              /* Include the scope of this interface as part of the address */
+              scopeid =
+                ((struct sockaddr_in6 *)iface->ifa_addr)->sin6_scope_id;
 #endif
-          if(scopeid)
-            snprintf(scope, sizeof(scope), "%%%u", scopeid);
-        }
-        else
+              if(scopeid != remote_scope) {
+                /* We are interested only in interface addresses whose
+                   scope ID matches the remote address we want to
+                   connect to: global (0) for global, link-local for
+                   link-local, etc... */
+                if(res == IF2IP_NOT_FOUND) res = IF2IP_AF_NOT_SUPPORTED;
+                continue;
+              }
+              if(scopeid)
+                snprintf(scope, sizeof(scope), "%%%u", scopeid);
+            }
+            else
 #endif
-          addr = &((struct sockaddr_in *)iface->ifa_addr)->sin_addr;
-        ip = (char *) Curl_inet_ntop(af, addr, ipstr, sizeof(ipstr));
-        snprintf(buf, buf_size, "%s%s", ip, scope);
-        ip = buf;
-        break;
+              addr = &((struct sockaddr_in *)iface->ifa_addr)->sin_addr;
+            res = IF2IP_FOUND;
+            ip = (char *) Curl_inet_ntop(af, addr, ipstr, sizeof(ipstr));
+            snprintf(buf, buf_size, "%s%s", ip, scope);
+            break;
+          }
+        }
+        else if((res == IF2IP_NOT_FOUND) &&
+                curl_strequal(iface->ifa_name, interf)) {
+          res = IF2IP_AF_NOT_SUPPORTED;
+        }
       }
     }
     freeifaddrs(head);
   }
-  return ip;
+  return res;
 }
 
 #elif defined(HAVE_IOCTL_SIOCGIFADDR)
@@ -128,30 +145,29 @@ bool Curl_if_is_interface_name(const char *interf)
   /* This is here just to support the old interfaces */
   char buf[256];
 
-  char *ip = Curl_if2ip(AF_INET, interf, buf, sizeof(buf));
-
-  return (ip != NULL) ? TRUE : FALSE;
+  return (Curl_if2ip(AF_INET, 0, interf, buf, sizeof(buf)) ==
+          IF2IP_NOT_FOUND) ? FALSE : TRUE;
 }
 
-char *Curl_if2ip(int af, const char *interf, char *buf, int buf_size)
+if2ip_result_t Curl_if2ip(int af, unsigned int remote_scope,
+                          const char *interf, char *buf, int buf_size)
 {
   struct ifreq req;
   struct in_addr in;
   struct sockaddr_in *s;
   curl_socket_t dummy;
   size_t len;
-  char *ip;
 
   if(!interf || (af != AF_INET))
-    return NULL;
+    return IF2IP_NOT_FOUND;
 
   len = strlen(interf);
   if(len >= sizeof(req.ifr_name))
-    return NULL;
+    return IF2IP_NOT_FOUND;
 
   dummy = socket(AF_INET, SOCK_STREAM, 0);
   if(CURL_SOCKET_BAD == dummy)
-    return NULL;
+    return IF2IP_NOT_FOUND;
 
   memset(&req, 0, sizeof(req));
   memcpy(req.ifr_name, interf, len+1);
@@ -159,15 +175,18 @@ char *Curl_if2ip(int af, const char *interf, char *buf, int buf_size)
 
   if(ioctl(dummy, SIOCGIFADDR, &req) < 0) {
     sclose(dummy);
-    return NULL;
+    /* With SIOCGIFADDR, we cannot tell the difference between an interface
+       that does not exist and an interface that has no address of the
+       correct family. Assume the interface does not exist */
+    return IF2IP_NOT_FOUND;
   }
 
   s = (struct sockaddr_in *)&req.ifr_addr;
   memcpy(&in, &s->sin_addr, sizeof(in));
-  ip = (char *) Curl_inet_ntop(s->sin_family, &in, buf, buf_size);
+  Curl_inet_ntop(s->sin_family, &in, buf, buf_size);
 
   sclose(dummy);
-  return ip;
+  return IF2IP_FOUND;
 }
 
 #else
@@ -179,13 +198,14 @@ bool Curl_if_is_interface_name(const char *interf)
   return FALSE;
 }
 
-char *Curl_if2ip(int af, const char *interf, char *buf, int buf_size)
+if2ip_result_t Curl_if2ip(int af, unsigned int remote_scope,
+                          const char *interf, char *buf, int buf_size)
 {
     (void) af;
     (void) interf;
     (void) buf;
     (void) buf_size;
-    return NULL;
+    return IF2IP_NOT_FOUND;
 }
 
 #endif
