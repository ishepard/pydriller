@@ -31,7 +31,7 @@ import re
 import time
 import pytest
 
-from testenv import Env, CurlClient
+from testenv import Env, CurlClient, ExecResult
 
 
 log = logging.getLogger(__name__)
@@ -52,20 +52,12 @@ class TestProxyAuth:
         httpd.set_proxy_auth(False)
         httpd.reload()
 
-    def set_tunnel_proto(self, proto):
-        if proto == 'h2':
-            os.environ['CURL_PROXY_TUNNEL_H2'] = '1'
-            return 'HTTP/2'
-        else:
-            os.environ.pop('CURL_PROXY_TUNNEL_H2', None)
-            return 'HTTP/1.1'
-
-    def get_tunnel_proto_used(self, curl: CurlClient):
-        assert os.path.exists(curl.trace_file)
-        for l in open(curl.trace_file).readlines():
-            m = re.match(r'.* == Info: CONNECT tunnel: (\S+) negotiated', l)
+    def get_tunnel_proto_used(self, r: ExecResult):
+        for line in r.trace_lines:
+            m = re.match(r'.* CONNECT tunnel: (\S+) negotiated$', line)
             if m:
                 return m.group(1)
+        assert False, f'tunnel protocol not found in:\n{"".join(r.trace_lines)}'
         return None
 
     # download via http: proxy (no tunnel), no auth
@@ -73,22 +65,17 @@ class TestProxyAuth:
         curl = CurlClient(env=env)
         url = f'http://localhost:{env.http_port}/data.json'
         r = curl.http_download(urls=[url], alpn_proto='http/1.1', with_stats=True,
-                               extra_args=[
-                                 '--proxy', f'http://{env.proxy_domain}:{env.proxy_port}/',
-                                 '--resolve', f'{env.proxy_domain}:{env.proxy_port}:127.0.0.1',
-                               ])
+                               extra_args=curl.get_proxy_args(proxys=False))
         r.check_response(count=1, http_status=407)
 
     # download via http: proxy (no tunnel), auth
     def test_13_02_proxy_auth(self, env: Env, httpd, repeat):
         curl = CurlClient(env=env)
         url = f'http://localhost:{env.http_port}/data.json'
+        xargs = curl.get_proxy_args(proxys=False)
+        xargs.extend(['--proxy-user', 'proxy:proxy'])
         r = curl.http_download(urls=[url], alpn_proto='http/1.1', with_stats=True,
-                               extra_args=[
-                                 '--proxy-user', 'proxy:proxy',
-                                 '--proxy', f'http://{env.proxy_domain}:{env.proxy_port}/',
-                                 '--resolve', f'{env.proxy_domain}:{env.proxy_port}:127.0.0.1',
-                               ])
+                               extra_args=xargs)
         r.check_response(count=1, http_status=200)
 
     @pytest.mark.skipif(condition=not Env.curl_has_feature('HTTPS-proxy'),
@@ -97,12 +84,9 @@ class TestProxyAuth:
     def test_13_03_proxys_no_auth(self, env: Env, httpd, nghttpx_fwd, repeat):
         curl = CurlClient(env=env)
         url = f'http://localhost:{env.http_port}/data.json'
+        xargs = curl.get_proxy_args(proxys=True)
         r = curl.http_download(urls=[url], alpn_proto='http/1.1', with_stats=True,
-                               extra_args=[
-                                 '--proxy', f'https://{env.proxy_domain}:{env.pts_port()}/',
-                                 '--resolve', f'{env.proxy_domain}:{env.pts_port()}:127.0.0.1',
-                                 '--proxy-cacert', env.ca.cert_file,
-                               ])
+                               extra_args=xargs)
         r.check_response(count=1, http_status=407)
 
     @pytest.mark.skipif(condition=not Env.curl_has_feature('HTTPS-proxy'),
@@ -111,37 +95,28 @@ class TestProxyAuth:
     def test_13_04_proxys_auth(self, env: Env, httpd, nghttpx_fwd, repeat):
         curl = CurlClient(env=env)
         url = f'http://localhost:{env.http_port}/data.json'
+        xargs = curl.get_proxy_args(proxys=True)
+        xargs.extend(['--proxy-user', 'proxy:proxy'])
         r = curl.http_download(urls=[url], alpn_proto='http/1.1', with_stats=True,
-                               extra_args=[
-                                 '--proxy-user', 'proxy:proxy',
-                                 '--proxy', f'https://{env.proxy_domain}:{env.pts_port()}/',
-                                 '--resolve', f'{env.proxy_domain}:{env.pts_port()}:127.0.0.1',
-                                 '--proxy-cacert', env.ca.cert_file,
-                               ])
+                               extra_args=xargs)
         r.check_response(count=1, http_status=200)
 
     def test_13_05_tunnel_http_no_auth(self, env: Env, httpd, repeat):
         curl = CurlClient(env=env)
         url = f'http://localhost:{env.http_port}/data.json'
+        xargs = curl.get_proxy_args(proxys=False, tunnel=True)
         r = curl.http_download(urls=[url], alpn_proto='http/1.1', with_stats=True,
-                               extra_args=[
-                                 '--proxytunnel',
-                                 '--proxy', f'http://{env.proxy_domain}:{env.proxy_port}/',
-                                 '--resolve', f'{env.proxy_domain}:{env.proxy_port}:127.0.0.1',
-                               ])
+                               extra_args=xargs)
         # expect "COULD_NOT_CONNECT"
         r.check_response(exitcode=56, http_status=None)
 
     def test_13_06_tunnel_http_auth(self, env: Env, httpd, repeat):
         curl = CurlClient(env=env)
         url = f'http://localhost:{env.http_port}/data.json'
+        xargs = curl.get_proxy_args(proxys=False, tunnel=True)
+        xargs.extend(['--proxy-user', 'proxy:proxy'])
         r = curl.http_download(urls=[url], alpn_proto='http/1.1', with_stats=True,
-                               extra_args=[
-                                 '--proxytunnel',
-                                 '--proxy-user', 'proxy:proxy',
-                                 '--proxy', f'http://{env.proxy_domain}:{env.proxy_port}/',
-                                 '--resolve', f'{env.proxy_domain}:{env.proxy_port}:127.0.0.1',
-                               ])
+                               extra_args=xargs)
         r.check_response(count=1, http_status=200)
 
     @pytest.mark.skipif(condition=not Env.have_nghttpx(), reason="no nghttpx available")
@@ -152,20 +127,16 @@ class TestProxyAuth:
     def test_13_07_tunnels_no_auth(self, env: Env, httpd, proto, tunnel, repeat):
         if tunnel == 'h2' and not env.curl_uses_lib('nghttp2'):
             pytest.skip('only supported with nghttp2')
-        exp_tunnel_proto = self.set_tunnel_proto(tunnel)
         curl = CurlClient(env=env)
         url = f'https://localhost:{env.https_port}/data.json'
+        xargs = curl.get_proxy_args(proxys=True, tunnel=True, proto=tunnel)
         r = curl.http_download(urls=[url], alpn_proto=proto, with_stats=True,
                                with_headers=True, with_trace=True,
-                               extra_args=[
-                                 '--proxytunnel',
-                                 '--proxy', f'https://{env.proxy_domain}:{env.pts_port(tunnel)}/',
-                                 '--resolve', f'{env.proxy_domain}:{env.pts_port(tunnel)}:127.0.0.1',
-                                 '--proxy-cacert', env.ca.cert_file,
-                               ])
+                               extra_args=xargs)
         # expect "COULD_NOT_CONNECT"
         r.check_response(exitcode=56, http_status=None)
-        assert self.get_tunnel_proto_used(curl) == exp_tunnel_proto
+        assert self.get_tunnel_proto_used(r) == 'HTTP/2' \
+            if tunnel == 'h2' else 'HTTP/1.1'
 
     @pytest.mark.skipif(condition=not Env.have_nghttpx(), reason="no nghttpx available")
     @pytest.mark.skipif(condition=not Env.curl_has_feature('HTTPS-proxy'),
@@ -175,19 +146,15 @@ class TestProxyAuth:
     def test_13_08_tunnels_auth(self, env: Env, httpd, proto, tunnel, repeat):
         if tunnel == 'h2' and not env.curl_uses_lib('nghttp2'):
             pytest.skip('only supported with nghttp2')
-        exp_tunnel_proto = self.set_tunnel_proto(tunnel)
         curl = CurlClient(env=env)
         url = f'https://localhost:{env.https_port}/data.json'
+        xargs = curl.get_proxy_args(proxys=True, tunnel=True, proto=tunnel)
+        xargs.extend(['--proxy-user', 'proxy:proxy'])
         r = curl.http_download(urls=[url], alpn_proto=proto, with_stats=True,
                                with_headers=True, with_trace=True,
-                               extra_args=[
-                                 '--proxytunnel',
-                                 '--proxy-user', 'proxy:proxy',
-                                 '--proxy', f'https://{env.proxy_domain}:{env.pts_port(tunnel)}/',
-                                 '--resolve', f'{env.proxy_domain}:{env.pts_port(tunnel)}:127.0.0.1',
-                                 '--proxy-cacert', env.ca.cert_file,
-                               ])
+                               extra_args=xargs)
         r.check_response(count=1, http_status=200,
                          protocol='HTTP/2' if proto == 'h2' else 'HTTP/1.1')
-        assert self.get_tunnel_proto_used(curl) == exp_tunnel_proto
+        assert self.get_tunnel_proto_used(r) == 'HTTP/2' \
+            if tunnel == 'h2' else 'HTTP/1.1'
 
