@@ -22,6 +22,7 @@
  *
  ***************************************************************************/
 #include "test.h"
+#include "first.h"
 
 #ifdef HAVE_LOCALE_H
 #  include <locale.h> /* for setlocale() */
@@ -137,6 +138,8 @@ int main(int argc, char **argv)
 {
   char *URL;
   CURLcode result;
+  int basearg;
+  test_func_t test_func;
 
 #ifdef O_BINARY
 #  ifdef __HIGHC__
@@ -157,25 +160,64 @@ int main(int argc, char **argv)
   setlocale(LC_ALL, "");
 #endif
 
-  if(argc < 2) {
+  test_argc = argc;
+  test_argv = argv;
+
+#ifdef CURLTESTS_BUNDLED
+  {
+    char *test_name;
+
+    --test_argc;
+    ++test_argv;
+
+    basearg = 2;
+
+    if(argc < (basearg + 1)) {
+      fprintf(stderr, "Pass testname and URL as arguments please\n");
+      return 1;
+    }
+
+    test_name = argv[basearg - 1];
+    test_func = NULL;
+    {
+      size_t tmp;
+      for(tmp = 0; tmp < (sizeof(s_tests)/sizeof((s_tests)[0])); ++tmp) {
+        if(strcmp(test_name, s_tests[tmp].name) == 0) {
+          test_func = s_tests[tmp].ptr;
+          break;
+        }
+      }
+    }
+
+    if(!test_func) {
+      fprintf(stderr, "Test '%s' not found.\n", test_name);
+      return 1;
+    }
+
+    fprintf(stderr, "Test: %s\n", test_name);
+  }
+#else
+  basearg = 1;
+
+  if(argc < (basearg + 1)) {
     fprintf(stderr, "Pass URL as argument please\n");
     return 1;
   }
 
-  test_argc = argc;
-  test_argv = argv;
+  test_func = test;
+#endif
 
-  if(argc > 2)
-    libtest_arg2 = argv[2];
+  if(argc > (basearg + 1))
+    libtest_arg2 = argv[basearg + 1];
 
-  if(argc > 3)
-    libtest_arg3 = argv[3];
+  if(argc > (basearg + 2))
+    libtest_arg3 = argv[basearg + 2];
 
-  URL = argv[1]; /* provide this to the rest */
+  URL = argv[basearg]; /* provide this to the rest */
 
   fprintf(stderr, "URL: %s\n", URL);
 
-  result = test(URL);
+  result = test_func(URL);
   fprintf(stderr, "Test ended with result %d\n", result);
 
 #ifdef _WIN32
