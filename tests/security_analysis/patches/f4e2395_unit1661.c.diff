@@ -49,7 +49,7 @@ static void unit_stop(void)
 
 UNITTEST_START
 {
-  char *buffer = NULL;
+  const char *buffer = NULL;
   CURLcode result = CURLE_OK;
 
   /**
@@ -72,7 +72,7 @@ UNITTEST_START
   abort_unless(buffer, "Out of memory");
   Curl_bufref_set(&bufref, buffer, 13, test_free);
 
-  fail_unless((char *) bufref.ptr == buffer, "Referenced data badly set");
+  fail_unless((const char *)bufref.ptr == buffer, "Referenced data badly set");
   fail_unless(bufref.len == 13, "Data size badly set");
   fail_unless(bufref.dtor == test_free, "Destructor badly set");
 
@@ -80,7 +80,7 @@ UNITTEST_START
    * testing Curl_bufref_ptr
    */
 
-  fail_unless((char *) Curl_bufref_ptr(&bufref) == buffer,
+  fail_unless((const char *) Curl_bufref_ptr(&bufref) == buffer,
               "Wrong pointer value returned");
 
   /**
@@ -96,8 +96,8 @@ UNITTEST_START
   result = Curl_bufref_memdup(&bufref, "1661", 3);
   abort_unless(result == CURLE_OK, curl_easy_strerror(result));
   fail_unless(freecount == 1, "Destructor not called");
-  fail_unless((char *) bufref.ptr != buffer, "Returned pointer not set");
-  buffer = (char *) Curl_bufref_ptr(&bufref);
+  fail_unless((const char *)bufref.ptr != buffer, "Returned pointer not set");
+  buffer = (const char *)Curl_bufref_ptr(&bufref);
   fail_unless(buffer, "Allocated pointer is NULL");
   fail_unless(bufref.len == 3, "Wrong data size stored");
   fail_unless(!buffer[3], "Duplicated data should have been truncated");
