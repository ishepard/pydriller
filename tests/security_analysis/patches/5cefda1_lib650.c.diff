@@ -21,7 +21,6 @@
  * SPDX-License-Identifier: curl
  *
  ***************************************************************************/
-#define CURL_DISABLE_DEPRECATION  /* Using and testing the form api */
 #include "test.h"
 
 #include "memdebug.h"
@@ -80,12 +79,13 @@ CURLcode test(char *URL)
     goto test_cleanup;
   }
   headers = headers2;
-  formrc = curl_formadd(&formpost, &lastptr,
-                        CURLFORM_COPYNAME, &name,
-                        CURLFORM_COPYCONTENTS, &data,
-                        CURLFORM_CONTENTHEADER, headers,
-                        CURLFORM_END);
-
+  CURL_IGNORE_DEPRECATION(
+    formrc = curl_formadd(&formpost, &lastptr,
+                          CURLFORM_COPYNAME, &name,
+                          CURLFORM_COPYCONTENTS, &data,
+                          CURLFORM_CONTENTHEADER, headers,
+                          CURLFORM_END);
+  )
   if(formrc) {
     printf("curl_formadd(1) = %d\n", (int) formrc);
     goto test_cleanup;
@@ -93,21 +93,22 @@ CURLcode test(char *URL)
 
   contentlength = (long)(strlen(data) - 1);
 
-  /* Use a form array for the non-copy test. */
-  formarray[0].option = CURLFORM_PTRCONTENTS;
-  formarray[0].value = data;
-  formarray[1].option = CURLFORM_CONTENTSLENGTH;
-  formarray[1].value = (char *)(size_t)contentlength;
-  formarray[2].option = CURLFORM_END;
-  formarray[2].value = NULL;
-  formrc = curl_formadd(&formpost,
-                        &lastptr,
-                        CURLFORM_PTRNAME, name,
-                        CURLFORM_NAMELENGTH, strlen(name) - 1,
-                        CURLFORM_ARRAY, formarray,
-                        CURLFORM_FILENAME, "remotefile.txt",
-                        CURLFORM_END);
-
+  CURL_IGNORE_DEPRECATION(
+    /* Use a form array for the non-copy test. */
+    formarray[0].option = CURLFORM_PTRCONTENTS;
+    formarray[0].value = data;
+    formarray[1].option = CURLFORM_CONTENTSLENGTH;
+    formarray[1].value = (char *)(size_t)contentlength;
+    formarray[2].option = CURLFORM_END;
+    formarray[2].value = NULL;
+    formrc = curl_formadd(&formpost,
+                          &lastptr,
+                          CURLFORM_PTRNAME, name,
+                          CURLFORM_NAMELENGTH, strlen(name) - 1,
+                          CURLFORM_ARRAY, formarray,
+                          CURLFORM_FILENAME, "remotefile.txt",
+                          CURLFORM_END);
+  )
   if(formrc) {
     printf("curl_formadd(2) = %d\n", (int) formrc);
     goto test_cleanup;
@@ -118,57 +119,65 @@ CURLcode test(char *URL)
      CURLOPT_PTRNAME actually copies the name thus we do not test this here. */
   data[0]++;
 
-  /* Check multi-files and content type propagation. */
-  formrc = curl_formadd(&formpost,
-                        &lastptr,
-                        CURLFORM_COPYNAME, "multifile",
-                        CURLFORM_FILE, libtest_arg2,    /* Set in first.c. */
-                        CURLFORM_FILE, libtest_arg2,
-                        CURLFORM_CONTENTTYPE, "text/whatever",
-                        CURLFORM_FILE, libtest_arg2,
-                        CURLFORM_END);
-
+  CURL_IGNORE_DEPRECATION(
+    /* Check multi-files and content type propagation. */
+    formrc = curl_formadd(&formpost,
+                          &lastptr,
+                          CURLFORM_COPYNAME, "multifile",
+                          CURLFORM_FILE, libtest_arg2,    /* Set in first.c. */
+                          CURLFORM_FILE, libtest_arg2,
+                          CURLFORM_CONTENTTYPE, "text/whatever",
+                          CURLFORM_FILE, libtest_arg2,
+                          CURLFORM_END);
+  )
   if(formrc) {
     printf("curl_formadd(3) = %d\n", (int) formrc);
     goto test_cleanup;
   }
 
-  /* Check data from file content. */
-  formrc = curl_formadd(&formpost,
-                        &lastptr,
-                        CURLFORM_COPYNAME, "filecontents",
-                        CURLFORM_FILECONTENT, libtest_arg2,
-                        CURLFORM_END);
-
+  CURL_IGNORE_DEPRECATION(
+    /* Check data from file content. */
+    formrc = curl_formadd(&formpost,
+                          &lastptr,
+                          CURLFORM_COPYNAME, "filecontents",
+                          CURLFORM_FILECONTENT, libtest_arg2,
+                          CURLFORM_END);
+  )
   if(formrc) {
     printf("curl_formadd(4) = %d\n", (int) formrc);
     goto test_cleanup;
   }
 
-  /* Measure the current form length.
-   * This is done before including stdin data because we want to reuse it
-   * and stdin cannot be rewound.
-   */
-  curl_formget(formpost, (void *) &formlength, count_chars);
+  CURL_IGNORE_DEPRECATION(
+    /* Measure the current form length.
+     * This is done before including stdin data because we want to reuse it
+     * and stdin cannot be rewound.
+     */
+    curl_formget(formpost, (void *) &formlength, count_chars);
+  )
 
   /* Include length in data for external check. */
   curl_msnprintf(flbuf, sizeof(flbuf), "%lu", (unsigned long) formlength);
-  formrc = curl_formadd(&formpost,
-                        &lastptr,
-                        CURLFORM_COPYNAME, "formlength",
-                        CURLFORM_COPYCONTENTS, &flbuf,
-                        CURLFORM_END);
+  CURL_IGNORE_DEPRECATION(
+    formrc = curl_formadd(&formpost,
+                          &lastptr,
+                          CURLFORM_COPYNAME, "formlength",
+                          CURLFORM_COPYCONTENTS, &flbuf,
+                          CURLFORM_END);
+  )
   if(formrc) {
     printf("curl_formadd(5) = %d\n", (int) formrc);
     goto test_cleanup;
   }
 
-  /* Check stdin (may be problematic on some platforms). */
-  formrc = curl_formadd(&formpost,
-                        &lastptr,
-                        CURLFORM_COPYNAME, "standardinput",
-                        CURLFORM_FILE, "-",
-                        CURLFORM_END);
+  CURL_IGNORE_DEPRECATION(
+    /* Check stdin (may be problematic on some platforms). */
+    formrc = curl_formadd(&formpost,
+                          &lastptr,
+                          CURLFORM_COPYNAME, "standardinput",
+                          CURLFORM_FILE, "-",
+                          CURLFORM_END);
+  )
   if(formrc) {
     printf("curl_formadd(6) = %d\n", (int) formrc);
     goto test_cleanup;
@@ -183,8 +192,10 @@ CURLcode test(char *URL)
   /* First set the URL that is about to receive our POST. */
   test_setopt(curl, CURLOPT_URL, URL);
 
-  /* send a multi-part formpost */
-  test_setopt(curl, CURLOPT_HTTPPOST, formpost);
+  CURL_IGNORE_DEPRECATION(
+    /* send a multi-part formpost */
+    test_setopt(curl, CURLOPT_HTTPPOST, formpost);
+  )
 
   /* get verbose debug output please */
   test_setopt(curl, CURLOPT_VERBOSE, 1L);
@@ -203,8 +214,10 @@ test_cleanup:
   /* always cleanup */
   curl_easy_cleanup(curl);
 
-  /* now cleanup the formpost chain */
-  curl_formfree(formpost);
+  CURL_IGNORE_DEPRECATION(
+    /* now cleanup the formpost chain */
+    curl_formfree(formpost);
+  )
   curl_slist_free_all(headers);
 
   curl_global_cleanup();
