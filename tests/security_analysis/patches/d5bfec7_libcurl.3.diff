@@ -4,7 +4,7 @@
 .SH NAME
 libcurl \- client-side URL transfers
 .SH DESCRIPTION
-This is an short overview on how to use libcurl in your C programs. There are
+This is a short overview on how to use libcurl in your C programs. There are
 specific man pages for each function mentioned in here. There are also the
 \fIlibcurl-easy(3)\fP man page, the \fIlibcurl-multi(3)\fP man page, the
 \fIlibcurl-share(3)\fP man page and the \fIlibcurl-tutorial(3)\fP man page for
@@ -25,14 +25,14 @@ the option of using the "easy" interface, or the "multi" interface.
 
 The easy interface is a synchronous interface with which you call
 \fIcurl_easy_perform(3)\fP and let it perform the transfer. When it is
-completed, the function return and you can continue. More details are found in
+completed, the function returns and you can continue. More details are found in
 the \fIlibcurl-easy(3)\fP man page.
 
 The multi interface on the other hand is an asynchronous interface, that you
 call and that performs only a little piece of the transfer on each invoke. It
 is perfect if you want to do things while the transfer is in progress, or
 similar. The multi interface allows you to select() on libcurl action, and
-even to easily download multiple files simultaneously using a single thread. See further deails in the \fIlibcurl-multi(3)\fP man page.
+even to easily download multiple files simultaneously using a single thread. See further details in the \fIlibcurl-multi(3)\fP man page.
 
 You can have multiple easy handles share certain data, even if they are used
 in different threads. This magic is setup using the share interface, as
@@ -106,7 +106,7 @@ do as many of your file transfers as possible using the same curl handle. When
 you call \fIcurl_easy_cleanup(3)\fP, all the possibly open connections held by
 libcurl will be closed and forgotten.
 
-Note that the options set with \fIcurl_easy_setopt(3)\fP will be used in on
+Note that the options set with \fIcurl_easy_setopt(3)\fP will be used on
 every repeated \fIcurl_easy_perform(3)\fP call.
 
 .SH "GLOBAL CONSTANTS"
@@ -161,7 +161,7 @@ and has a place to call the libcurl functions.  Note that if multiple
 modules in the program use libcurl, they all will separately call the
 libcurl functions, and that's OK because only the first
 \fIcurl_global_init()\fP and the last \fIcurl_global_cleanup()\fP in a
-program changes anything.  (libcurl uses a reference count in static
+program change anything.  (libcurl uses a reference count in static
 memory).
 
 In a C++ module, it is common to deal with the global constant
