@@ -34,7 +34,7 @@
 
 static struct dynhds_entry *
 entry_new(const char *name, size_t namelen,
-          const char *value, size_t valuelen)
+          const char *value, size_t valuelen, int opts)
 {
   struct dynhds_entry *e;
   char *p;
@@ -50,9 +50,35 @@ entry_new(const char *name, size_t namelen,
   e->value = p += namelen + 1; /* leave a \0 at the end of name */
   memcpy(p, value, valuelen);
   e->valuelen = valuelen;
+  if(opts & DYNHDS_OPT_LOWERCASE)
+    Curl_strntolower(e->name, e->name, e->namelen);
   return e;
 }
 
+static struct dynhds_entry *
+entry_append(struct dynhds_entry *e,
+             const char *value, size_t valuelen)
+{
+  struct dynhds_entry *e2;
+  size_t valuelen2 = e->valuelen + 1 + valuelen;
+  char *p;
+
+  DEBUGASSERT(value);
+  e2 = calloc(1, sizeof(*e) + e->namelen + valuelen2 + 2);
+  if(!e2)
+    return NULL;
+  e2->name = p = ((char *)e2) + sizeof(*e2);
+  memcpy(p, e->name, e->namelen);
+  e2->namelen = e->namelen;
+  e2->value = p += e->namelen + 1; /* leave a \0 at the end of name */
+  memcpy(p, e->value, e->valuelen);
+  p += e->valuelen;
+  p[0] = ' ';
+  memcpy(p + 1, value, valuelen);
+  e2->valuelen = valuelen2;
+  return e2;
+}
+
 static void entry_free(struct dynhds_entry *e)
 {
   free(e);
@@ -67,6 +93,7 @@ void Curl_dynhds_init(struct dynhds *dynhds, size_t max_entries,
   dynhds->hds_len = dynhds->hds_allc = dynhds->strs_len = 0;
   dynhds->max_entries = max_entries;
   dynhds->max_strs_size = max_strs_size;
+  dynhds->opts = 0;
 }
 
 void Curl_dynhds_free(struct dynhds *dynhds)
@@ -102,6 +129,11 @@ size_t Curl_dynhds_count(struct dynhds *dynhds)
   return dynhds->hds_len;
 }
 
+void Curl_dynhds_set_opts(struct dynhds *dynhds, int opts)
+{
+  dynhds->opts = opts;
+}
+
 struct dynhds_entry *Curl_dynhds_getn(struct dynhds *dynhds, size_t n)
 {
   DEBUGASSERT(dynhds);
@@ -150,7 +182,7 @@ CURLcode Curl_dynhds_add(struct dynhds *dynhds,
   if(dynhds->strs_len + namelen + valuelen > dynhds->max_strs_size)
     return CURLE_OUT_OF_MEMORY;
 
-  entry = entry_new(name, namelen, value, valuelen);
+entry = entry_new(name, namelen, value, valuelen, dynhds->opts);
   if(!entry)
     goto out;
 
@@ -203,33 +235,65 @@ CURLcode Curl_dynhds_cset(struct dynhds *dynhds,
   return Curl_dynhds_set(dynhds, name, strlen(name), value, strlen(value));
 }
 
-CURLcode Curl_dynhds_h1_cadd_line(struct dynhds *dynhds, const char *line)
+CURLcode Curl_dynhds_h1_add_line(struct dynhds *dynhds,
+                                 const char *line, size_t line_len)
 {
   const char *p;
   const char *name;
   size_t namelen;
   const char *value;
-  size_t valuelen;
+  size_t valuelen, i;
 
-  if(!line)
+  if(!line || !line_len)
+    return CURLE_OK;
+
+  if((line[0] == ' ') || (line[0] == '\t')) {
+    struct dynhds_entry *e, *e2;
+    /* header continuation, yikes! */
+    if(!dynhds->hds_len)
+      return CURLE_BAD_FUNCTION_ARGUMENT;
+
+    while(line_len && ISBLANK(line[0])) {
+      ++line;
+      --line_len;
+    }
+    if(!line_len)
+      return CURLE_BAD_FUNCTION_ARGUMENT;
+    e = dynhds->hds[dynhds->hds_len-1];
+    e2 = entry_append(e, line, line_len);
+    if(!e2)
+      return CURLE_OUT_OF_MEMORY;
+    dynhds->hds[dynhds->hds_len-1] = e2;
+    entry_free(e);
     return CURLE_OK;
-  p = strchr(line, ':');
-  if(!p) {
-    return CURLE_BAD_FUNCTION_ARGUMENT;
   }
+  else {
+    p = memchr(line, ':', line_len);
+    if(!p)
+      return CURLE_BAD_FUNCTION_ARGUMENT;
+    name = line;
+    namelen = p - line;
+    p++; /* move past the colon */
+    for(i = namelen + 1; i < line_len; ++i, ++p) {
+      if(!ISBLANK(*p))
+        break;
+    }
+    value = p;
+    valuelen = line_len - i;
 
-  name = line;
-  namelen = p - line;
-  p++; /* move past the colon */
-  while(ISBLANK(*p))
-    p++;
-  value = p;
-  p = strchr(value, '\r');
-  if(!p)
-    p = strchr(value, '\n');
-  valuelen = p? ((size_t)(p - value)) : strlen(value);
+    p = memchr(value, '\r', valuelen);
+    if(!p)
+      p = memchr(value, '\n', valuelen);
+    if(p)
+      valuelen = (size_t)(p - value);
 
-  return Curl_dynhds_add(dynhds, name, namelen, value, valuelen);
+    return Curl_dynhds_add(dynhds, name, namelen, value, valuelen);
+  }
+}
+
+CURLcode Curl_dynhds_h1_cadd_line(struct dynhds *dynhds, const char *line)
+{
+  return Curl_dynhds_h1_add_line(dynhds, line, line? strlen(line) : 0);
 }
 
 size_t Curl_dynhds_count_name(struct dynhds *dynhds,
